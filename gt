#!/bin/bash


function _gt_add() {

    ALIAS=$1

    if [[ -f $CONFIG_DIR$ALIAS ]] ; then
        echo "Error: alias '$ALIAS' already exists."
        return 1
    fi

    if [[ "$ALIAS" =~ 'add|remove|info' ]] ; then
        echo "Error: aliases 'add', 'remove' and 'info' are forbidden."
        return 1
    fi

    if [[ ${ALIAS:0:1} == '.' || ${ALIAS:0:1} == '-' ]] ; then
        echo "Error: aliases cannot start with '.' or '-'"
        return 1
    fi

    pwd > $CONFIG_DIR$ALIAS

    echo "Alias '$ALIAS' successfully added."
    return 0
}

function _gt_remove() {

    ALIAS=$1

    if [[ ! -f $CONFIG_DIR$ALIAS ]] ; then
        echo "Error: alias '$ALIAS' does not exist."
        return 1
    fi

    rm $CONFIG_DIR$ALIAS

    echo "Alias '$ALIAS' successfully removed."
    return 0
}

function _gt_info() {

    ALIAS=$1

    if [[ ! -f $CONFIG_DIR$ALIAS ]] ; then
        echo "Error: alias '$ALIAS' does not exist."
        return 1
    fi

    read -r target_directory < $CONFIG_DIR$ALIAS
    echo "$ALIAS -> $target_directory"
}

function _gt_clean() {

    for file in $CONFIG_DIR/* ; do
        read -r target_directory < $file
        if [[ ! -d $target_directory ]] ; then
            rm $file
            echo "Alias '$(basename $file)' deleted."
        fi
    done
}

function _gt_list() {

    list=''

    _gt_tmux
    CONFIG_TMUX=$?

    for alias_i in $(ls $CONFIG_DIR) ; do

        read -r target_directory < $CONFIG_DIR$alias_i

        if [[ $CONFIG_TMUX -eq 1 ]] ; then

            tmux has-session -t $alias_i &> /dev/null
            if [[ $? -ne 0 ]] ; then
                list+="\n[n] "
            elif [[ -n $TMUX &&
                    $(tmux display-message -p "#S") == "$alias_i" ]] ; then
                list+="\n[x] "
            else
                list+="\n[-] "
            fi
        else
            list+="\n"
        fi

        if [[ ! -d $target_directory ]] ; then
            list+="$alias_i -> \e[0;90m$target_directory\e[0m"
        else
            list+="$alias_i -> $target_directory"
        fi
    done

    if [[ "$list" == '' ]] ; then
        echo "No alias registered. See 'gt --help' or 'gt -h' for help."
    else
        echo $list | column -t -s' ' | sed -r 's/^\[n\] /[ ] /'
    fi

    return 0
}

function _gt_config() {

    KEY=$1
    VALUE=$2

    if [[ "$KEY" == 'tmux' ]] ; then
        if [[ "$VALUE" != 'on' && "$VALUE" != 'off' ]] ; then
            echo 'Usage: gt config tmux {on, off}'
            return 1
        fi

        config=$(cat $CONFIG_DIR.settings.yml)
        config=$(echo $config | sed -r "s/tmux: (off|on)/tmux: $VALUE/")
        echo $config > $CONFIG_DIR.settings.yml

        return 0
    fi

    return 0
}

function _gt_tmux() {

    config_line=$(cat $CONFIG_DIR.settings.yml | grep '^tmux: \(on\|off\)')

    if [[ $config_line == '' ]] ; then
        echo 'Error: no tmux configuration set'
        return 0
    fi

    echo $config_line | grep 'on' &> /dev/null

    if [[ $? -eq 0 ]] ; then
        return 1
    else
        return 0
    fi
}

function _gt_goto() {

    ALIAS=$1
    OPTION_TMUX=$2
    OPTION_CURRENT=$3

    if [[ ! -f $CONFIG_DIR$ALIAS ]] ; then
        echo "Error: alias '$ALIAS' does not exist."
        return 1
    fi

    read -r target_directory < $CONFIG_DIR$ALIAS

    if [[ ! -d $target_directory ]] ; then
        echo 'Error: target directory of alias '$ALIAS" no longer exists."
        return 1
    fi

    _gt_tmux
    if [[ ( ! $OPTION_CURRENT -eq 1 ) && ( $? || $OPTION_TMUX -eq 1 ) ]] ; then

        tmux has-session -t $ALIAS &> /dev/null

        if [[ $? -ne 0 ]] ; then
            (cd $target_directory; tmux new -s $ALIAS -d)
        fi

        if [[ -n $TMUX && $(tmux display-message -p "#S") == "$ALIAS" ]] ; then
            cd $target_directory
        elif [[ -n $TMUX ]] ; then
            tmux switch-client -t $ALIAS
        else
            tmux attach -t $ALIAS
        fi

    else
        cd $target_directory
    fi
}


# If no configuration directory set, create one

CONFIG_DIR_FILE=$(dirname "$0")'/.CONFIG'

if [[ ! -f $CONFIG_DIR_FILE ]] ; then

    echo -ne 'Choose gt config directory \e[0;90m(~/.config/gt)\e[0m: '

    read CONFIG_DIR
    if [[ "$CONFIG_DIR" == '' ]] ; then
        CONFIG_DIR=~/.config/gt
    fi
    CONFIG_DIR=${CONFIG_DIR/#\~/$HOME}
    CONFIG_DIR=${CONFIG_DIR%/}'/'

    mkdir -p $CONFIG_DIR &> /dev/null
    touch $CONFIG_DIR.settings.yml &> /dev/null
    if [[ $? -ne 0 ]] ; then
        echo "Unable to use configuration directory $CONFIG_DIR"
        return 1
    fi

    echo $CONFIG_DIR > $CONFIG_DIR_FILE
    echo 'tmux: off' > $CONFIG_DIR.settings.yml

else
    read -r CONFIG_DIR < $CONFIG_DIR_FILE
fi


# Parse command and check usage


if [[ "$@" =~ "-h"  || "$@" =~ "--help" ]] ; then

    echo 'Usage: gt'
    echo 'Usage: gt add ALIAS'
    echo 'Usage: gt remove ALIAS'
    echo 'Usage: gt info ALIAS'
    echo 'Usage: gt clean'
    echo ''
    echo 'Usage: gt config KEY VALUE'
    echo ''
    echo 'Usage: gt [-htc] [--help] [--tmux] [--current] [ALIAS]'

    if [[ $# -ne 1 ]] ; then
        return 1
    else
        return 0
    fi

elif [[ $# -eq 0 ]] ; then

    _gt_list

elif [[ $1 == 'add' ]] ; then

    if [[ $# -ne 2 ]] ; then
        echo 'Usage: gt add ALIAS'
        return 1
    fi

    _gt_add $2

elif [[ $1 == 'remove' ]] ; then

    if [[ $# -ne 2 ]] ; then
        echo 'Usage: gt remove ALIAS'
        return 1
    fi

    _gt_remove $2

elif [[ $1 == 'info' ]] ; then

    if [[ $# -ne 2 ]] ; then
        echo 'Usage: gt info ALIAS'
        return 1
    fi

    _gt_info $2

elif [[ $1 == 'clean' ]] ; then

    if [[ $# -ne 1 ]] ; then
        echo 'Usage: gt clean'
        return 1
    fi

    _gt_clean

elif [[ $1 == 'config' ]] ; then

    if [[ $# -ne 3 || ( "$2" != 'tmux' ) ]] ; then

        echo 'Usage: gt config KEY VALUE'
        echo ''
        echo 'KEYS'
        echo '    tmux: {on, off}'
        echo '          whether to start a tmux session upon goto'

        return 1
    fi

    _gt_config $2 $3

else

    if [[ $# -eq 1 ]] ; then
        _gt_goto $1
        return $?
    fi

    _option_help=0
    _option_tmux=0
    _option_current=0

    [[ "$@" =~ "-h"  || "$@" =~ "--help" ]] && _option_help=1
    [[ "$@" =~ "-t"  || "$@" =~ "--tmux" ]] && _option_tmux=1
    [[ "$@" =~ "-c"  || "$@" =~ "--current" ]] && _option_current=1

    if [[ $(($_option_help + $_option_tmux + $_option_current)) -gt 1 ]] ; then

        echo 'Usage: options -h/--help, -t/--tmux and -c/--curent are ' \
             'mutually exclusive.'

        return 1

    elif [[ $_option_help -eq 1 && $# -gt 1 ]] ; then

        echo 'Usage: gt -h'
        echo 'Usage: gt --help'

        return 1

    elif [[ $_option_tmux -eq 1 && $# -ne 2 ]] ; then

        echo 'Usage: gt -t ALIAS'
        echo 'Usage: gt --tmux ALIAS'

        return 1

    elif [[ $_option_current -eq 1 && $# -ne 2 ]] ; then

        echo 'Usage: gt -c ALIAS'
        echo 'Usage: gt --current ALIAS'

        return 1

    fi

    while [[ ${1:0:1} == '-' ]] ; do
        shift
    done

    _gt_goto $1 $_option_tmux $_option_current
    return gt

fi
